# import undetected_chromedriver as uc
# from selenium.webdriver.common.by import By
# from selenium.webdriver.support.ui import WebDriverWait
# from selenium.webdriver.support import expected_conditions as EC
# from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton
# from telegram.ext import Application, CommandHandler, ContextTypes, CallbackQueryHandler
# import time
# import pickle
# import os
# import logging
# import asyncio
# import random
# import pandas as pd
# from datetime import datetime
# from openpyxl import load_workbook
# from telegram.error import BadRequest, TelegramError
# from dotenv import load_dotenv
# from flask import Flask, request, Response
# import json
# import threading

# # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
# logging.basicConfig(
#     level=logging.INFO,
#     format='%(asctime)s - %(levelname)s - %(message)s',
#     handlers=[
#         logging.FileHandler('ozon_bot.log'),
#         logging.StreamHandler()
#     ]
# )

# # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env
# load_dotenv()

# # –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
# BOT_TOKEN = os.getenv("BOT_TOKEN")
# WEBHOOK_URL = os.getenv("WEBHOOK_URL")
# COOKIES_FILE = "ozon_cookies.pkl"  # –õ–æ–∫–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª –¥–ª—è Windows
# CHECK_INTERVAL = 10
# TIMEOUT = 40
# BRAND_URL = "https://uz.ozon.com/brand/naturalino-100091998"

# # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Flask
# app = Flask(__name__)

# # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram Application
# telegram_app = Application.builder().token(BOT_TOKEN).build()

# # –ì–ª–æ–±–∞–ª—å–Ω—ã–π —Å–æ–±—ã—Ç–∏–π–Ω—ã–π —Ü–∏–∫–ª –¥–ª—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á
# loop = asyncio.new_event_loop()

# # –ó–∞–ø—É—Å–∫ —Ü–∏–∫–ª–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
# def run_loop():
#     asyncio.set_event_loop(loop)
#     loop.run_forever()

# threading.Thread(target=run_loop, daemon=True).start()

# # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥—Ä–∞–π–≤–µ—Ä–∞
# def init_driver(headless=True):
#     options = uc.ChromeOptions()
#     if headless:
#         options.add_argument("--headless")
#         options.add_argument("--no-sandbox")
#         options.add_argument("--disable-dev-shm-usage")
#     options.add_argument("--disable-blink-features=AutomationControlled")
#     driver = uc.Chrome(options=options)
#     return driver

# # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
# def check_login(driver):
#     try:
#         driver.get("https://uz.ozon.com")
#         time.sleep(1)
#         auth_indicators = ["–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å", "–ö–∞–±–∏–Ω–µ—Ç", "–ò–∑–±—Ä–∞–Ω–Ω–æ–µ", "–ú–æ–∏ –∑–∞–∫–∞–∑—ã", "–í—ã–π—Ç–∏"]
#         page_text = driver.page_source
#         with open('page.html', 'w', encoding='utf-8') as f:
#             f.write(page_text)
#         return any(indicator in page_text for indicator in auth_indicators)
#     except Exception as e:
#         logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {e}")
#         return False

# # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫—É–∫–æ–≤
# def save_cookies(driver):
#     try:
#         current_domain = driver.current_url.split('/')[2]
#         driver.get(f"https://{current_domain}")
#         time.sleep(1)
#         cookies = driver.get_cookies()
#         with open(COOKIES_FILE, "wb") as f:
#             pickle.dump((current_domain, cookies), f)
#         return True
#     except Exception as e:
#         logging.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫—É–∫–æ–≤: {e}")
#         return False

# # –ó–∞–≥—Ä—É–∑–∫–∞ –∫—É–∫–æ–≤
# def load_cookies(driver):
#     if not os.path.exists(COOKIES_FILE):
#         return False
#     try:
#         with open(COOKIES_FILE, "rb") as f:
#             domain, cookies = pickle.load(f)
#         driver.get(f"https://{domain}")
#         time.sleep(1)
#         driver.delete_all_cookies()
#         for cookie in cookies:
#             driver.add_cookie(cookie)
#         driver.refresh()
#         time.sleep(1)
#         return check_login(driver)
#     except Exception as e:
#         logging.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫—É–∫–æ–≤: {e}")
#         return False

# # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞
# def check_access_restricted(driver):
#     try:
#         page_text = driver.page_source
#         return "–î–æ—Å—Ç—É–ø –æ–≥—Ä–∞–Ω–∏—á–µ–Ω" in page_text or "Access restricted" in page_text
#     except Exception as e:
#         logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞: {e}")
#         return False

# # –ü–∞—Ä—Å–∏–Ω–≥ —Ç–æ–≤–∞—Ä–æ–≤ –±—Ä–µ–Ω–¥–∞
# def parse_brand_products(driver, url):
#     wait = WebDriverWait(driver, 10)
#     driver.get(url)
#     time.sleep(random.uniform(2, 4))
#     if check_access_restricted(driver):
#         logging.error("–î–æ—Å—Ç—É–ø –æ–≥—Ä–∞–Ω–∏—á–µ–Ω")
#         return None
#     products = []
#     while True:
#         for _ in range(3):
#             driver.execute_script("window.scrollBy(0, 500);")
#             time.sleep(random.uniform(0.5, 1.5))
#         driver.execute_script("window.scrollTo(0, document.body.scrollHeight);")
#         time.sleep(random.uniform(2, 4))
#         try:
#             items = wait.until(EC.presence_of_all_elements_located((By.XPATH, "//div[contains(@class, 'tile-root')]")))
#             for item in items:
#                 try:
#                     name = item.find_element(By.XPATH, ".//span[contains(@class, 'tsBody500Medium')]").text
#                     price = "N/A"
#                     try:
#                         price_elem = item.find_element(By.XPATH, ".//span[contains(@class, 'tsHeadline500Medium')]")
#                         price = price_elem.text
#                     except:
#                         pass
#                     link = item.find_element(By.XPATH, ".//a[contains(@class, 'tile-clickable-element')]").get_attribute("href")
#                     sku = link.split("-")[-1].split("/")[0] if "-" in link else "N/A"
#                     products.append({
#                         "Name": name,
#                         "SKU": sku,
#                         "Price (Ozon Card)": price
#                     })
#                 except Exception as e:
#                     logging.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Ç–æ–≤–∞—Ä–∞: {e}")
#         except Exception as e:
#             logging.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤: {e}")
#             break
#         try:
#             next_button = driver.find_element(By.XPATH, "//a[contains(@class, 'next-page')]")
#             if "disabled" in next_button.get_attribute("class"):
#                 break
#             next_button.click()
#             time.sleep(random.uniform(2, 4))
#         except:
#             break
#     return products

# async def send_reply(update: Update, text: str):
#     try:
#         if update.message:
#             await update.message.reply_text(text)
#             logging.info("–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ —á–∞—Ç")
#         elif update.callback_query and update.callback_query.message:
#             await update.callback_query.message.reply_text(text)
#             logging.info("–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —á–µ—Ä–µ–∑ callback")
#         else:
#             logging.error("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç message –∏–ª–∏ callback_query.message")
#     except TelegramError as e:
#         logging.error(f"–û—à–∏–±–∫–∞ Telegram API –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
#     except Exception as e:
#         logging.error(f"–û–±—â–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

# async def check_auth_task(update: Update, driver):
#     start_time = time.time()
#     logged_in = False
#     while time.time() - start_time < TIMEOUT:
#         try:
#             if check_login(driver):
#                 if save_cookies(driver):
#                     await send_reply(update, "‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã! –ö—É–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã. –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—É /parse –∏–ª–∏ –∫–Ω–æ–ø–∫—É '–ü–∞—Ä—Å–∏—Ç—å'.")
#                 else:
#                     await send_reply(update, "‚úÖ –í—ã –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã, –Ω–æ –∫—É–∫–∏ –Ω–µ —Å–æ—Ö—Ä–∞–Ω–∏–ª–∏—Å—å. –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—É /parse –∏–ª–∏ –∫–Ω–æ–ø–∫—É '–ü–∞—Ä—Å–∏—Ç—å'.")
#                 logged_in = True
#                 break
#         except Exception as e:
#             logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏: {e}")
#         await asyncio.sleep(CHECK_INTERVAL)
#     if not logged_in:
#         await send_reply(update, "‚ùå –í—ã –Ω–µ –≤–æ—à–ª–∏ –≤ —Å–∏—Å—Ç–µ–º—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

# async def callback_query_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
#     query = update.callback_query
#     await query.answer()
#     logging.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ callback: {query.data}")
#     if query.data == "open_ozon":
#         try:
#             await query.message.reply_text(
#                 "üîë –ü–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ –∏ –≤–æ–π–¥–∏—Ç–µ –≤ Ozon:\n"
#                 "üëâ https://uz.ozon.com\n\n"
#                 "‚è≥ –ü—Ä–æ–≤–µ—Ä—è—é –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é..."
#             )
#         except BadRequest as e:
#             logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {e}")
#             await query.message.reply_text("‚ùå –û—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
#             return
#         driver = init_driver(headless=True)
#         try:
#             await check_auth_task(update, driver)
#         finally:
#             try:
#                 driver.quit()
#             except:
#                 pass
#     elif query.data == "parse":
#         await parse_command(update, context)

# async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
#     logging.info("start_command –≤—ã–∑–≤–∞–Ω")
#     try:
#         checking_msg = await update.message.reply_text("‚è≥ –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–µ—Å—Å–∏—é...")
#         driver = init_driver(headless=True)
#         is_authorized = False
#         try:
#             if load_cookies(driver):
#                 is_authorized = True
#                 logging.info("–°–µ—Å—Å–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
#         finally:
#             try:
#                 driver.quit()
#             except:
#                 pass
#         keyboard_buttons = [[InlineKeyboardButton("üîç –û—Ç–∫—Ä—ã—Ç—å Ozon", callback_data="open_ozon")]]
#         if is_authorized:
#             keyboard_buttons.append([InlineKeyboardButton("üîÑ –ü–∞—Ä—Å–∏—Ç—å", callback_data="parse")])
#         keyboard = InlineKeyboardMarkup(keyboard_buttons)
#         if is_authorized:
#             await checking_msg.edit_text(
#                 "‚úÖ –í—ã —É–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /parse –∏–ª–∏ –∫–Ω–æ–ø–∫—É '–ü–∞—Ä—Å–∏—Ç—å' –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ —Ç–æ–≤–∞—Ä–æ–≤.",
#                 reply_markup=keyboard
#             )
#         else:
#             await checking_msg.edit_text(
#                 "üëã –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è –≤ Ozon.",
#                 reply_markup=keyboard
#             )
#         logging.info("–ò–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞")
#     except TelegramError as e:
#         logging.error(f"–û—à–∏–±–∫–∞ Telegram API –≤ start_command: {e}")
#         await send_reply(update, "‚ùå –û—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
#     except Exception as e:
#         logging.error(f"–û–±—â–∞—è –æ—à–∏–±–∫–∞ –≤ start_command: {e}")
#         await send_reply(update, "‚ùå –û—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

# async def parse_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
#     if not os.path.exists(COOKIES_FILE):
#         await send_reply(update, "‚ùå –°–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –∞–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /start –∏ –∫–Ω–æ–ø–∫–∏ '–û—Ç–∫—Ä—ã—Ç—å Ozon'.")
#         return
#     await send_reply(update, "‚è≥ –ù–∞—á–∏–Ω–∞—é –ø–∞—Ä—Å–∏–Ω–≥ —Ç–æ–≤–∞—Ä–æ–≤ –±—Ä–µ–Ω–¥–∞ Naturalino...")
#     driver = init_driver(headless=True)
#     try:
#         if not load_cookies(driver):
#             await send_reply(update, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–µ—Å—Å–∏—é. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∞–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å –∑–∞–Ω–æ–≤–æ.")
#             return
#         products = parse_brand_products(driver, BRAND_URL)
#         if not products:
#             await send_reply(update, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–≤–∞—Ä—ã. –í–æ–∑–º–æ–∂–Ω–æ, –¥–æ—Å—Ç—É–ø –æ–≥—Ä–∞–Ω–∏—á–µ–Ω –∏–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.")
#             return
#         df = pd.DataFrame(products)
#         timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
#         excel_file = f"naturalino_products_{timestamp}.xlsx"
#         df.to_excel(excel_file, index=False)
#         wb = load_workbook(excel_file)
#         ws = wb.active
#         for col in ws.columns:
#             col_letter = col[0].column_letter
#             ws.column_dimensions[col_letter].width = 75
#         wb.save(excel_file)
#         with open(excel_file, 'rb') as f:
#             if update.message:
#                 await update.message.reply_document(document=f, caption="‚úÖ –ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω! –í–æ—Ç —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ –±—Ä–µ–Ω–¥–∞ Naturalino.")
#             elif update.callback_query and update.callback_query.message:
#                 await update.callback_query.message.reply_document(document=f, caption="‚úÖ –ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω! –í–æ—Ç —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ –±—Ä–µ–Ω–¥–∞ Naturalino.")
#         os.remove(excel_file)
#     except Exception as e:
#         logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ: {e}")
#         await send_reply(update, f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ: {str(e)}")
#     finally:
#         try:
#             driver.quit()
#         except:
#             pass

# # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
# telegram_app.add_handler(CommandHandler("start", start_command))
# telegram_app.add_handler(CommandHandler("parse", parse_command))
# telegram_app.add_handler(CallbackQueryHandler(callback_query_handler))

# # Webhook –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
# @app.route('/webhook', methods=['POST'])
# def webhook():
#     data = request.get_json()
#     logging.info(f"–ü–æ–ª—É—á–µ–Ω webhook –∑–∞–ø—Ä–æ—Å: {data}")
#     try:
#         update = Update.de_json(data, telegram_app.bot)
#         if update:
#             # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –≤ –≥–ª–æ–±–∞–ª—å–Ω–æ–º —Ü–∏–∫–ª–µ
#             asyncio.run_coroutine_threadsafe(telegram_app.process_update(update), loop)
#             logging.info("Update –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É")
#         else:
#             logging.error("–ü–æ–ª—É—á–µ–Ω –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π update")
#     except Exception as e:
#         logging.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ webhook: {e}")
#     return Response(status=200)

# # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤–µ–±—Ö—É–∫–∞
# async def init_app():
#     await telegram_app.initialize()
#     await telegram_app.start()
#     try:
#         await telegram_app.bot.set_webhook(url=WEBHOOK_URL)
#         logging.info(f"Webhook —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {WEBHOOK_URL}")
#     except TelegramError as e:
#         logging.error(f"–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ webhook: {e}")
#         await asyncio.sleep(5)
#         try:
#             await telegram_app.bot.set_webhook(url=WEBHOOK_URL)
#             logging.info(f"Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ—Å–ª–µ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–∏: {WEBHOOK_URL}")
#         except TelegramError as e:
#             logging.error(f"–ü–æ–≤—Ç–æ—Ä–Ω–∞—è –æ—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ webhook: {e}")

# # –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
# if __name__ == "__main__":
#     logging.info(f"–ó–∞–ø—É—Å–∫ Flask –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è —Å WEBHOOK_URL={WEBHOOK_URL}")
#     asyncio.run(init_app())
#     app.run(host='0.0.0.0', port=int(os.getenv("PORT", 5000)))

import undetected_chromedriver as uc
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import Application, CommandHandler, ContextTypes, CallbackQueryHandler
import time
import pickle
import os
import logging
import asyncio
import random
import pandas as pd
from datetime import datetime
from openpyxl import load_workbook
from telegram.error import BadRequest, TelegramError
from dotenv import load_dotenv
from flask import Flask, request, Response
import json
import threading

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('ozon_bot.log'),
        logging.StreamHandler()
    ]
)

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env
load_dotenv()

# –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
BOT_TOKEN = os.getenv("BOT_TOKEN")
WEBHOOK_URL = os.getenv("WEBHOOK_URL")
COOKIES_FILE = "ozon_cookies.pkl"
CHECK_INTERVAL = 10
TIMEOUT = 80
BRAND_URL = "https://uz.ozon.com/brand/naturalino-100091998"

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Flask
app = Flask(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram Application
telegram_app = Application.builder().token(BOT_TOKEN).build()

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —Å–æ–±—ã—Ç–∏–π–Ω—ã–π —Ü–∏–∫–ª –¥–ª—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á
loop = asyncio.new_event_loop()

# –ó–∞–ø—É—Å–∫ —Ü–∏–∫–ª–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
def run_loop():
    asyncio.set_event_loop(loop)
    loop.run_forever()

threading.Thread(target=run_loop, daemon=True).start()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥—Ä–∞–π–≤–µ—Ä–∞
def init_driver(headless=True):
    options = uc.ChromeOptions()
    if headless:
        options.add_argument("--headless")
        options.add_argument("--no-sandbox")
        options.add_argument("--disable-dev-shm-usage")
    options.add_argument("--disable-blink-features=AutomationControlled")
    driver = uc.Chrome(options=options)
    return driver

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
def check_login(driver):
    try:
        driver.get("https://uz.ozon.com")
        time.sleep(1)
        auth_indicators = ["–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å", "–ö–∞–±–∏–Ω–µ—Ç", "–ò–∑–±—Ä–∞–Ω–Ω–æ–µ", "–ú–æ–∏ –∑–∞–∫–∞–∑—ã", "–í—ã–π—Ç–∏"]
        page_text = driver.page_source
        with open('page.html', 'w', encoding='utf-8') as f:
            f.write(page_text)
        return any(indicator in page_text for indicator in auth_indicators)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {e}")
        return False

# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫—É–∫–æ–≤
def save_cookies(driver):
    try:
        current_domain = driver.current_url.split('/')[2]
        driver.get(f"https://{current_domain}")
        time.sleep(1)
        cookies = driver.get_cookies()
        with open(COOKIES_FILE, "wb") as f:
            pickle.dump((current_domain, cookies), f)
        return True
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫—É–∫–æ–≤: {e}")
        return False

# –ó–∞–≥—Ä—É–∑–∫–∞ –∫—É–∫–æ–≤
def load_cookies(driver):
    if not os.path.exists(COOKIES_FILE):
        return False
    try:
        with open(COOKIES_FILE, "rb") as f:
            domain, cookies = pickle.load(f)
        driver.get(f"https://{domain}")
        time.sleep(1)
        driver.delete_all_cookies()
        for cookie in cookies:
            driver.add_cookie(cookie)
        driver.refresh()
        time.sleep(1)
        return check_login(driver)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫—É–∫–æ–≤: {e}")
        return False

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞
def check_access_restricted(driver):
    try:
        page_text = driver.page_source
        return "–î–æ—Å—Ç—É–ø –æ–≥—Ä–∞–Ω–∏—á–µ–Ω" in page_text or "Access restricted" in page_text
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞: {e}")
        return False

# –ü–∞—Ä—Å–∏–Ω–≥ —Ç–æ–≤–∞—Ä–æ–≤ –±—Ä–µ–Ω–¥–∞
def parse_brand_products(driver, url):
    wait = WebDriverWait(driver, 10)
    driver.get(url)
    time.sleep(random.uniform(2, 4))
    if check_access_restricted(driver):
        logging.error("–î–æ—Å—Ç—É–ø –æ–≥—Ä–∞–Ω–∏—á–µ–Ω")
        return None
    products = []
    while True:
        for _ in range(3):
            driver.execute_script("window.scrollBy(0, 500);")
            time.sleep(random.uniform(0.5, 1.5))
        driver.execute_script("window.scrollTo(0, document.body.scrollHeight);")
        time.sleep(random.uniform(2, 4))
        try:
            items = wait.until(EC.presence_of_all_elements_located((By.XPATH, "//div[contains(@class, 'tile-root')]")))
            for item in items:
                try:
                    name = item.find_element(By.XPATH, ".//span[contains(@class, 'tsBody500Medium')]").text
                    price = "N/A"
                    try:
                        price_elem = item.find_element(By.XPATH, ".//span[contains(@class, 'tsHeadline500Medium')]")
                        price = price_elem.text
                    except:
                        pass
                    link = item.find_element(By.XPATH, ".//a[contains(@class, 'tile-clickable-element')]").get_attribute("href")
                    sku = link.split("-")[-1].split("/")[0] if "-" in link else "N/A"
                    products.append({
                        "Name": name,
                        "SKU": sku,
                        "Price (Ozon Card)": price
                    })
                except Exception as e:
                    logging.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Ç–æ–≤–∞—Ä–∞: {e}")
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤: {e}")
            break
        try:
            next_button = driver.find_element(By.XPATH, "//a[contains(@class, 'next-page')]")
            if "disabled" in next_button.get_attribute("class"):
                break
            next_button.click()
            time.sleep(random.uniform(2, 4))
        except:
            break
    return products

async def send_reply(update: Update, text: str):
    try:
        if update.message:
            await update.message.reply_text(text)
            logging.info("–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ —á–∞—Ç")
        elif update.callback_query and update.callback_query.message:
            await update.callback_query.message.reply_text(text)
            logging.info("–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —á–µ—Ä–µ–∑ callback")
        else:
            logging.error("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç message –∏–ª–∏ callback_query.message")
    except TelegramError as e:
        logging.error(f"–û—à–∏–±–∫–∞ Telegram API –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
    except Exception as e:
        logging.error(f"–û–±—â–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

async def check_auth_task(update: Update, driver):
    start_time = time.time()
    logged_in = False
    while time.time() - start_time < TIMEOUT:
        try:
            if check_login(driver):
                if save_cookies(driver):
                    await send_reply(update, "‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã! –ö—É–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã. –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—É /parse –∏–ª–∏ –∫–Ω–æ–ø–∫—É '–ü–∞—Ä—Å–∏—Ç—å'.")
                else:
                    await send_reply(update, "‚úÖ –í—ã –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã, –Ω–æ –∫—É–∫–∏ –Ω–µ —Å–æ—Ö—Ä–∞–Ω–∏–ª–∏—Å—å. –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—É /parse –∏–ª–∏ –∫–Ω–æ–ø–∫—É '–ü–∞—Ä—Å–∏—Ç—å'.")
                logged_in = True
                break
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏: {e}")
        await asyncio.sleep(CHECK_INTERVAL)
    if not logged_in:
        await send_reply(update, "‚ùå –í—ã –Ω–µ –≤–æ—à–ª–∏ –≤ —Å–∏—Å—Ç–µ–º—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

async def callback_query_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    logging.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ callback: {query.data}")
    if query.data == "open_ozon":
        try:
            await query.message.reply_text(
                "üîë –ü–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ –∏ –≤–æ–π–¥–∏—Ç–µ –≤ Ozon:\n"
                "üëâ https://uz.ozon.com\n\n"
                "‚è≥ –ü—Ä–æ–≤–µ—Ä—è—é –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é..."
            )
        except BadRequest as e:
            logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {e}")
            await query.message.reply_text("‚ùå –û—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
            return
        driver = init_driver(headless=True)
        try:
            await check_auth_task(update, driver)
        finally:
            try:
                driver.quit()
            except:
                pass
    elif query.data == "parse":
        await parse_command(update, context)

async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    logging.info("start_command –≤—ã–∑–≤–∞–Ω")
    try:
        checking_msg = await update.message.reply_text("‚è≥ –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–µ—Å—Å–∏—é...")
        driver = init_driver(headless=True)
        is_authorized = False
        try:
            if load_cookies(driver):
                is_authorized = True
                logging.info("–°–µ—Å—Å–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
        finally:
            try:
                driver.quit()
            except:
                pass
        keyboard_buttons = [[InlineKeyboardButton("üîç –û—Ç–∫—Ä—ã—Ç—å Ozon", callback_data="open_ozon")]]
        if is_authorized:
            keyboard_buttons.append([InlineKeyboardButton("üîÑ –ü–∞—Ä—Å–∏—Ç—å", callback_data="parse")])
        keyboard = InlineKeyboardMarkup(keyboard_buttons)
        if is_authorized:
            await checking_msg.edit_text(
                "‚úÖ –í—ã —É–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /parse –∏–ª–∏ –∫–Ω–æ–ø–∫—É '–ü–∞—Ä—Å–∏—Ç—å' –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ —Ç–æ–≤–∞—Ä–æ–≤.",
                reply_markup=keyboard
            )
        else:
            await checking_msg.edit_text(
                "üëã –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è –≤ Ozon.",
                reply_markup=keyboard
            )
        logging.info("–ò–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞")
    except TelegramError as e:
        logging.error(f"–û—à–∏–±–∫–∞ Telegram API –≤ start_command: {e}")
        await send_reply(update, "‚ùå –û—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
    except Exception as e:
        logging.error(f"–û–±—â–∞—è –æ—à–∏–±–∫–∞ –≤ start_command: {e}")
        await send_reply(update, "‚ùå –û—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

async def parse_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not os.path.exists(COOKIES_FILE):
        await send_reply(update, "‚ùå –°–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –∞–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /start –∏ –∫–Ω–æ–ø–∫–∏ '–û—Ç–∫—Ä—ã—Ç—å Ozon'.")
        return
    await send_reply(update, "‚è≥ –ù–∞—á–∏–Ω–∞—é –ø–∞—Ä—Å–∏–Ω–≥ —Ç–æ–≤–∞—Ä–æ–≤ –±—Ä–µ–Ω–¥–∞ Naturalino...")
    driver = init_driver(headless=True)
    try:
        if not load_cookies(driver):
            await send_reply(update, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–µ—Å—Å–∏—é. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∞–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å –∑–∞–Ω–æ–≤–æ.")
            return
        products = parse_brand_products(driver, BRAND_URL)
        if not products:
            await send_reply(update, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–≤–∞—Ä—ã. –í–æ–∑–º–æ–∂–Ω–æ, –¥–æ—Å—Ç—É–ø –æ–≥—Ä–∞–Ω–∏—á–µ–Ω –∏–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.")
            return
        df = pd.DataFrame(products)
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        excel_file = f"naturalino_products_{timestamp}.xlsx"
        df.to_excel(excel_file, index=False)
        wb = load_workbook(excel_file)
        ws = wb.active
        for col in ws.columns:
            col_letter = col[0].column_letter
            ws.column_dimensions[col_letter].width = 75
        wb.save(excel_file)
        with open(excel_file, 'rb') as f:
            if update.message:
                await update.message.reply_document(document=f, caption="‚úÖ –ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω! –í–æ—Ç —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ –±—Ä–µ–Ω–¥–∞ Naturalino.")
            elif update.callback_query and update.callback_query.message:
                await update.callback_query.message.reply_document(document=f, caption="‚úÖ –ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω! –í–æ—Ç —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ –±—Ä–µ–Ω–¥–∞ Naturalino.")
        os.remove(excel_file)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ: {e}")
        await send_reply(update, f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ: {str(e)}")
    finally:
        try:
            driver.quit()
        except:
            pass

# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
telegram_app.add_handler(CommandHandler("start", start_command))
telegram_app.add_handler(CommandHandler("parse", parse_command))
telegram_app.add_handler(CallbackQueryHandler(callback_query_handler))

# Webhook –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
@app.route('/webhook', methods=['POST'])
def webhook():
    data = request.get_json()
    logging.info(f"–ü–æ–ª—É—á–µ–Ω webhook –∑–∞–ø—Ä–æ—Å: {data}")
    try:
        update = Update.de_json(data, telegram_app.bot)
        if update:
            asyncio.run_coroutine_threadsafe(telegram_app.process_update(update), loop)
            logging.info("Update –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É")
        else:
            logging.error("–ü–æ–ª—É—á–µ–Ω –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π update")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ webhook: {e}")
    return Response(status=200)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤–µ–±—Ö—É–∫–∞
async def init_app():
    await telegram_app.initialize()
    await telegram_app.start()
    try:
        await telegram_app.bot.set_webhook(url=WEBHOOK_URL)
        logging.info(f"Webhook —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {WEBHOOK_URL}")
    except TelegramError as e:
        logging.error(f"–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ webhook: {e}")
        await asyncio.sleep(5)
        try:
            await telegram_app.bot.set_webhook(url=WEBHOOK_URL)
            logging.info(f"Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ—Å–ª–µ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–∏: {WEBHOOK_URL}")
        except TelegramError as e:
            logging.error(f"–ü–æ–≤—Ç–æ—Ä–Ω–∞—è –æ—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ webhook: {e}")

# –ö–æ—Ä–Ω–µ–≤–æ–π –º–∞—Ä—à—Ä—É—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
@app.route('/')
def index():
    return 'Flask server is running', 200

if __name__ == "__main__":
    logging.info(f"–ó–∞–ø—É—Å–∫ Flask –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è —Å WEBHOOK_URL={WEBHOOK_URL}")
    asyncio.run(init_app())
    app.run(host='0.0.0.0', port=int(os.getenv("PORT", 5000)))